/* 
 * Nasjonalt Register over Luftfartshindre
 *
 * ## Autentisering Finn autoriserings token her: [https://nrl-test.kartverket.no/token/](https://nrl-test.kartverket.no/token/)   Trykk \"Authorize\" og skriv inn `Bearer <token>`  ## Kontakt oss Spørsmål kan sendes til [nrl@kartverket.no](mailto:nrl@kartverket.no) ## Annen dokumentasjon [Introduksjon til NRL](https://www.kartverket.no/geodataarbeid/nrl)   [SOSI-standardisert produktspesifikasjon - NRL rapportering](https://sosi.geonorge.no/produktspesifikasjoner/NRL-rapportering/)   [NRL - webklient](https://nrl-test.kartverket.no) 
 *
 * OpenAPI spec version: 0.6.59
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using IO.Swagger.Api;
using IO.Swagger.Model;
using IO.Swagger.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing Geometry
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the model.
    /// </remarks>
    [TestFixture]
    public class GeometryTests
    {
        // TODO uncomment below to declare an instance variable for Geometry
        //private Geometry instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // TODO uncomment below to create an instance of Geometry
            //instance = new Geometry();
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of Geometry
        /// </summary>
        [Test]
        public void GeometryInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" Geometry
            //Assert.IsInstanceOfType<Geometry> (instance, "variable 'instance' is a Geometry");
        }

        /// <summary>
        /// Test deserialize a Point from type Geometry
        /// </summary>
        [Test]
        public void PointDeserializeFromGeometryTest()
        {
            // TODO uncomment below to test deserialize a Point from type Geometry
            //Assert.IsInstanceOf<Geometry>(JsonConvert.DeserializeObject<Geometry>(new Point().ToJson()));
        }
        /// <summary>
        /// Test deserialize a LineString from type Geometry
        /// </summary>
        [Test]
        public void LineStringDeserializeFromGeometryTest()
        {
            // TODO uncomment below to test deserialize a LineString from type Geometry
            //Assert.IsInstanceOf<Geometry>(JsonConvert.DeserializeObject<Geometry>(new LineString().ToJson()));
        }
        /// <summary>
        /// Test deserialize a Polygon from type Geometry
        /// </summary>
        [Test]
        public void PolygonDeserializeFromGeometryTest()
        {
            // TODO uncomment below to test deserialize a Polygon from type Geometry
            //Assert.IsInstanceOf<Geometry>(JsonConvert.DeserializeObject<Geometry>(new Polygon().ToJson()));
        }

        /// <summary>
        /// Test the property 'Crs'
        /// </summary>
        [Test]
        public void CrsTest()
        {
            // TODO unit test for the property 'Crs'
        }
        /// <summary>
        /// Test the property 'Type'
        /// </summary>
        [Test]
        public void TypeTest()
        {
            // TODO unit test for the property 'Type'
        }

    }

}
