/* 
 * Nasjonalt Register over Luftfartshindre
 *
 * ## Autentisering Finn autoriserings token her: [https://nrl-test.kartverket.no/token/](https://nrl-test.kartverket.no/token/)   Trykk \"Authorize\" og skriv inn `Bearer <token>`  ## Kontakt oss Spørsmål kan sendes til [nrl@kartverket.no](mailto:nrl@kartverket.no) ## Annen dokumentasjon [Introduksjon til NRL](https://www.kartverket.no/geodataarbeid/nrl)   [SOSI-standardisert produktspesifikasjon - NRL rapportering](https://sosi.geonorge.no/produktspesifikasjoner/NRL-rapportering/)   [NRL - webklient](https://nrl-test.kartverket.no) 
 *
 * OpenAPI spec version: 0.6.59
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface INrlRapporteringApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Oppdater objekter med nullstilte verdier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="eierId"></param>
        /// <returns>FeatureCollection</returns>
        FeatureCollection Features (FeatureCollection body, Guid? eierId);

        /// <summary>
        /// Oppdater objekter med nullstilte verdier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="eierId"></param>
        /// <returns>ApiResponse of FeatureCollection</returns>
        ApiResponse<FeatureCollection> FeaturesWithHttpInfo (FeatureCollection body, Guid? eierId);
        /// <summary>
        /// Oppdater eller meld inn nye objekter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="eierId"></param>
        /// <returns>FeatureCollection</returns>
        FeatureCollection Features1 (FeatureCollection body, Guid? eierId);

        /// <summary>
        /// Oppdater eller meld inn nye objekter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="eierId"></param>
        /// <returns>ApiResponse of FeatureCollection</returns>
        ApiResponse<FeatureCollection> Features1WithHttpInfo (FeatureCollection body, Guid? eierId);
        /// <summary>
        /// Hent hindre som features
        /// </summary>
        /// <remarks>
        /// Søk kan gjøres med enkeltfelter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eierId">Hent tilgjengelige hinder tilknyttet oppgitt eierId</param>
        /// <param name="CRS">Velg Koordinatsystem.</param>
        /// <param name="objekttype">Velg en kategori av luftfartshindre, default er å returnere alle tilgjengelige typer. (optional)</param>
        /// <param name="id">Hente ett spesifikt hinder med oppgitt komponentident. (optional)</param>
        /// <param name="bbox">Bounding box, eksempelvis: &#x27;EPSG:4326 10.10 59.90, 10.62 60.28&#x27; (optional)</param>
        /// <returns>FeatureCollection</returns>
        FeatureCollection Features2 (Guid? eierId, string CRS, string objekttype = null, Guid? id = null, string bbox = null);

        /// <summary>
        /// Hent hindre som features
        /// </summary>
        /// <remarks>
        /// Søk kan gjøres med enkeltfelter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eierId">Hent tilgjengelige hinder tilknyttet oppgitt eierId</param>
        /// <param name="CRS">Velg Koordinatsystem.</param>
        /// <param name="objekttype">Velg en kategori av luftfartshindre, default er å returnere alle tilgjengelige typer. (optional)</param>
        /// <param name="id">Hente ett spesifikt hinder med oppgitt komponentident. (optional)</param>
        /// <param name="bbox">Bounding box, eksempelvis: &#x27;EPSG:4326 10.10 59.90, 10.62 60.28&#x27; (optional)</param>
        /// <returns>ApiResponse of FeatureCollection</returns>
        ApiResponse<FeatureCollection> Features2WithHttpInfo (Guid? eierId, string CRS, string objekttype = null, Guid? id = null, string bbox = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Oppdater objekter med nullstilte verdier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="eierId"></param>
        /// <returns>Task of FeatureCollection</returns>
        System.Threading.Tasks.Task<FeatureCollection> FeaturesAsync (FeatureCollection body, Guid? eierId);

        /// <summary>
        /// Oppdater objekter med nullstilte verdier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="eierId"></param>
        /// <returns>Task of ApiResponse (FeatureCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeatureCollection>> FeaturesAsyncWithHttpInfo (FeatureCollection body, Guid? eierId);
        /// <summary>
        /// Oppdater eller meld inn nye objekter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="eierId"></param>
        /// <returns>Task of FeatureCollection</returns>
        System.Threading.Tasks.Task<FeatureCollection> Features1Async (FeatureCollection body, Guid? eierId);

        /// <summary>
        /// Oppdater eller meld inn nye objekter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="eierId"></param>
        /// <returns>Task of ApiResponse (FeatureCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeatureCollection>> Features1AsyncWithHttpInfo (FeatureCollection body, Guid? eierId);
        /// <summary>
        /// Hent hindre som features
        /// </summary>
        /// <remarks>
        /// Søk kan gjøres med enkeltfelter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eierId">Hent tilgjengelige hinder tilknyttet oppgitt eierId</param>
        /// <param name="CRS">Velg Koordinatsystem.</param>
        /// <param name="objekttype">Velg en kategori av luftfartshindre, default er å returnere alle tilgjengelige typer. (optional)</param>
        /// <param name="id">Hente ett spesifikt hinder med oppgitt komponentident. (optional)</param>
        /// <param name="bbox">Bounding box, eksempelvis: &#x27;EPSG:4326 10.10 59.90, 10.62 60.28&#x27; (optional)</param>
        /// <returns>Task of FeatureCollection</returns>
        System.Threading.Tasks.Task<FeatureCollection> Features2Async (Guid? eierId, string CRS, string objekttype = null, Guid? id = null, string bbox = null);

        /// <summary>
        /// Hent hindre som features
        /// </summary>
        /// <remarks>
        /// Søk kan gjøres med enkeltfelter.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eierId">Hent tilgjengelige hinder tilknyttet oppgitt eierId</param>
        /// <param name="CRS">Velg Koordinatsystem.</param>
        /// <param name="objekttype">Velg en kategori av luftfartshindre, default er å returnere alle tilgjengelige typer. (optional)</param>
        /// <param name="id">Hente ett spesifikt hinder med oppgitt komponentident. (optional)</param>
        /// <param name="bbox">Bounding box, eksempelvis: &#x27;EPSG:4326 10.10 59.90, 10.62 60.28&#x27; (optional)</param>
        /// <returns>Task of ApiResponse (FeatureCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeatureCollection>> Features2AsyncWithHttpInfo (Guid? eierId, string CRS, string objekttype = null, Guid? id = null, string bbox = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class NrlRapporteringApi : INrlRapporteringApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NrlRapporteringApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NrlRapporteringApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NrlRapporteringApi"/> class
        /// </summary>
        /// <returns></returns>
        public NrlRapporteringApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NrlRapporteringApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NrlRapporteringApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Oppdater objekter med nullstilte verdier. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="eierId"></param>
        /// <returns>FeatureCollection</returns>
        public FeatureCollection Features (FeatureCollection body, Guid? eierId)
        {
             ApiResponse<FeatureCollection> localVarResponse = FeaturesWithHttpInfo(body, eierId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Oppdater objekter med nullstilte verdier. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="eierId"></param>
        /// <returns>ApiResponse of FeatureCollection</returns>
        public ApiResponse< FeatureCollection > FeaturesWithHttpInfo (FeatureCollection body, Guid? eierId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling NrlRapporteringApi->Features");
            // verify the required parameter 'eierId' is set
            if (eierId == null)
                throw new ApiException(400, "Missing required parameter 'eierId' when calling NrlRapporteringApi->Features");

            var localVarPath = "/api/ekstern/nrl_rapportering/features";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eierId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eierId", eierId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Features", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FeatureCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureCollection)));
        }

        /// <summary>
        /// Oppdater objekter med nullstilte verdier. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="eierId"></param>
        /// <returns>Task of FeatureCollection</returns>
        public async System.Threading.Tasks.Task<FeatureCollection> FeaturesAsync (FeatureCollection body, Guid? eierId)
        {
             ApiResponse<FeatureCollection> localVarResponse = await FeaturesAsyncWithHttpInfo(body, eierId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Oppdater objekter med nullstilte verdier. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="eierId"></param>
        /// <returns>Task of ApiResponse (FeatureCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeatureCollection>> FeaturesAsyncWithHttpInfo (FeatureCollection body, Guid? eierId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling NrlRapporteringApi->Features");
            // verify the required parameter 'eierId' is set
            if (eierId == null)
                throw new ApiException(400, "Missing required parameter 'eierId' when calling NrlRapporteringApi->Features");

            var localVarPath = "/api/ekstern/nrl_rapportering/features";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eierId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eierId", eierId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Features", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FeatureCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureCollection)));
        }

        /// <summary>
        /// Oppdater eller meld inn nye objekter. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="eierId"></param>
        /// <returns>FeatureCollection</returns>
        public FeatureCollection Features1 (FeatureCollection body, Guid? eierId)
        {
             ApiResponse<FeatureCollection> localVarResponse = Features1WithHttpInfo(body, eierId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Oppdater eller meld inn nye objekter. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="eierId"></param>
        /// <returns>ApiResponse of FeatureCollection</returns>
        public ApiResponse< FeatureCollection > Features1WithHttpInfo (FeatureCollection body, Guid? eierId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling NrlRapporteringApi->Features1");
            // verify the required parameter 'eierId' is set
            if (eierId == null)
                throw new ApiException(400, "Missing required parameter 'eierId' when calling NrlRapporteringApi->Features1");

            var localVarPath = "/api/ekstern/nrl_rapportering/features";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eierId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eierId", eierId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Features1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FeatureCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureCollection)));
        }

        /// <summary>
        /// Oppdater eller meld inn nye objekter. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="eierId"></param>
        /// <returns>Task of FeatureCollection</returns>
        public async System.Threading.Tasks.Task<FeatureCollection> Features1Async (FeatureCollection body, Guid? eierId)
        {
             ApiResponse<FeatureCollection> localVarResponse = await Features1AsyncWithHttpInfo(body, eierId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Oppdater eller meld inn nye objekter. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="eierId"></param>
        /// <returns>Task of ApiResponse (FeatureCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeatureCollection>> Features1AsyncWithHttpInfo (FeatureCollection body, Guid? eierId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling NrlRapporteringApi->Features1");
            // verify the required parameter 'eierId' is set
            if (eierId == null)
                throw new ApiException(400, "Missing required parameter 'eierId' when calling NrlRapporteringApi->Features1");

            var localVarPath = "/api/ekstern/nrl_rapportering/features";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eierId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eierId", eierId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Features1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FeatureCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureCollection)));
        }

        /// <summary>
        /// Hent hindre som features Søk kan gjøres med enkeltfelter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eierId">Hent tilgjengelige hinder tilknyttet oppgitt eierId</param>
        /// <param name="CRS">Velg Koordinatsystem.</param>
        /// <param name="objekttype">Velg en kategori av luftfartshindre, default er å returnere alle tilgjengelige typer. (optional)</param>
        /// <param name="id">Hente ett spesifikt hinder med oppgitt komponentident. (optional)</param>
        /// <param name="bbox">Bounding box, eksempelvis: &#x27;EPSG:4326 10.10 59.90, 10.62 60.28&#x27; (optional)</param>
        /// <returns>FeatureCollection</returns>
        public FeatureCollection Features2 (Guid? eierId, string CRS, string objekttype = null, Guid? id = null, string bbox = null)
        {
             ApiResponse<FeatureCollection> localVarResponse = Features2WithHttpInfo(eierId, CRS, objekttype, id, bbox);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Hent hindre som features Søk kan gjøres med enkeltfelter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eierId">Hent tilgjengelige hinder tilknyttet oppgitt eierId</param>
        /// <param name="CRS">Velg Koordinatsystem.</param>
        /// <param name="objekttype">Velg en kategori av luftfartshindre, default er å returnere alle tilgjengelige typer. (optional)</param>
        /// <param name="id">Hente ett spesifikt hinder med oppgitt komponentident. (optional)</param>
        /// <param name="bbox">Bounding box, eksempelvis: &#x27;EPSG:4326 10.10 59.90, 10.62 60.28&#x27; (optional)</param>
        /// <returns>ApiResponse of FeatureCollection</returns>
        public ApiResponse< FeatureCollection > Features2WithHttpInfo (Guid? eierId, string CRS, string objekttype = null, Guid? id = null, string bbox = null)
        {
            // verify the required parameter 'eierId' is set
            if (eierId == null)
                throw new ApiException(400, "Missing required parameter 'eierId' when calling NrlRapporteringApi->Features2");
            // verify the required parameter 'CRS' is set
            if (CRS == null)
                throw new ApiException(400, "Missing required parameter 'CRS' when calling NrlRapporteringApi->Features2");

            var localVarPath = "/api/ekstern/nrl_rapportering/features";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eierId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eierId", eierId)); // query parameter
            if (objekttype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "objekttype", objekttype)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (bbox != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bbox", bbox)); // query parameter
            if (CRS != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CRS", CRS)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Features2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FeatureCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureCollection)));
        }

        /// <summary>
        /// Hent hindre som features Søk kan gjøres med enkeltfelter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eierId">Hent tilgjengelige hinder tilknyttet oppgitt eierId</param>
        /// <param name="CRS">Velg Koordinatsystem.</param>
        /// <param name="objekttype">Velg en kategori av luftfartshindre, default er å returnere alle tilgjengelige typer. (optional)</param>
        /// <param name="id">Hente ett spesifikt hinder med oppgitt komponentident. (optional)</param>
        /// <param name="bbox">Bounding box, eksempelvis: &#x27;EPSG:4326 10.10 59.90, 10.62 60.28&#x27; (optional)</param>
        /// <returns>Task of FeatureCollection</returns>
        public async System.Threading.Tasks.Task<FeatureCollection> Features2Async (Guid? eierId, string CRS, string objekttype = null, Guid? id = null, string bbox = null)
        {
             ApiResponse<FeatureCollection> localVarResponse = await Features2AsyncWithHttpInfo(eierId, CRS, objekttype, id, bbox);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Hent hindre som features Søk kan gjøres med enkeltfelter.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eierId">Hent tilgjengelige hinder tilknyttet oppgitt eierId</param>
        /// <param name="CRS">Velg Koordinatsystem.</param>
        /// <param name="objekttype">Velg en kategori av luftfartshindre, default er å returnere alle tilgjengelige typer. (optional)</param>
        /// <param name="id">Hente ett spesifikt hinder med oppgitt komponentident. (optional)</param>
        /// <param name="bbox">Bounding box, eksempelvis: &#x27;EPSG:4326 10.10 59.90, 10.62 60.28&#x27; (optional)</param>
        /// <returns>Task of ApiResponse (FeatureCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeatureCollection>> Features2AsyncWithHttpInfo (Guid? eierId, string CRS, string objekttype = null, Guid? id = null, string bbox = null)
        {
            // verify the required parameter 'eierId' is set
            if (eierId == null)
                throw new ApiException(400, "Missing required parameter 'eierId' when calling NrlRapporteringApi->Features2");
            // verify the required parameter 'CRS' is set
            if (CRS == null)
                throw new ApiException(400, "Missing required parameter 'CRS' when calling NrlRapporteringApi->Features2");

            var localVarPath = "/api/ekstern/nrl_rapportering/features";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eierId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eierId", eierId)); // query parameter
            if (objekttype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "objekttype", objekttype)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (bbox != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bbox", bbox)); // query parameter
            if (CRS != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CRS", CRS)); // query parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Features2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FeatureCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureCollection)));
        }

    }
}
