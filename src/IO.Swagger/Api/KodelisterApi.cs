/* 
 * Nasjonalt Register over Luftfartshindre
 *
 * ## Autentisering Finn autoriserings token her: [https://nrl-test.kartverket.no/token/](https://nrl-test.kartverket.no/token/)   Trykk \"Authorize\" og skriv inn `Bearer <token>`  ## Kontakt oss Spørsmål kan sendes til [nrl@kartverket.no](mailto:nrl@kartverket.no) ## Annen dokumentasjon [Introduksjon til NRL](https://www.kartverket.no/geodataarbeid/nrl)   [SOSI-standardisert produktspesifikasjon - NRL rapportering](https://sosi.geonorge.no/produktspesifikasjoner/NRL-rapportering/)   [NRL - webklient](https://nrl-test.kartverket.no) 
 *
 * OpenAPI spec version: 0.6.59
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Configuration;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IKodelisterApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Hent alle Kodelister.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>KoderDTO</returns>
        KoderDTO All ();

        /// <summary>
        /// Hent alle Kodelister.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of KoderDTO</returns>
        ApiResponse<KoderDTO> AllWithHttpInfo ();
        /// <summary>
        /// Hent koder for oppgitt kodeliste.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kodelistenavn"></param>
        /// <returns>KodeDTO</returns>
        KodeDTO HentKodeListe (string kodelistenavn);

        /// <summary>
        /// Hent koder for oppgitt kodeliste.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kodelistenavn"></param>
        /// <returns>ApiResponse of KodeDTO</returns>
        ApiResponse<KodeDTO> HentKodeListeWithHttpInfo (string kodelistenavn);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Hent alle Kodelister.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of KoderDTO</returns>
        System.Threading.Tasks.Task<KoderDTO> AllAsync ();

        /// <summary>
        /// Hent alle Kodelister.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (KoderDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<KoderDTO>> AllAsyncWithHttpInfo ();
        /// <summary>
        /// Hent koder for oppgitt kodeliste.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kodelistenavn"></param>
        /// <returns>Task of KodeDTO</returns>
        System.Threading.Tasks.Task<KodeDTO> HentKodeListeAsync (string kodelistenavn);

        /// <summary>
        /// Hent koder for oppgitt kodeliste.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kodelistenavn"></param>
        /// <returns>Task of ApiResponse (KodeDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<KodeDTO>> HentKodeListeAsyncWithHttpInfo (string kodelistenavn);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class KodelisterApi : IKodelisterApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="KodelisterApi"/> class.
        /// </summary>
        /// <returns></returns>
        public KodelisterApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KodelisterApi"/> class
        /// </summary>
        /// <returns></returns>
        public KodelisterApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KodelisterApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public KodelisterApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Hent alle Kodelister. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>KoderDTO</returns>
        public KoderDTO All ()
        {
             ApiResponse<KoderDTO> localVarResponse = AllWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Hent alle Kodelister. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of KoderDTO</returns>
        public ApiResponse< KoderDTO > AllWithHttpInfo ()
        {

            //20231121-leg: Kartverket has changed endpoints from koder to kodeverdier
            var localVarPath = "/api/ekstern/kodeverdier"; //var localVarPath = "/api/ekstern/koder/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // Lars test, moved to Configuration.GetApiKeyWithPrefix
            //localVarHeaderParams["Authorization"] =   ConfigurationManager.AppSettings.Get("Authorization");
            //localVarHeaderParams["Authorization"] =
            //    "Bearer eyJraWQiOiJ0ZXN0LTIiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJTNFhncVpkak5LXzdhOGROODRnMEE2amNpMXZWWEVmN2puVFdnSUtvWVBlSjhNZFVWTlppNzFwZ1kya0RXeXRfSWFwallwVmlGNS10Zm9STGExaHhLQ0k4RnVjeXdvWEFTelhVZzZDYU8tUlp3ejQiLCJwaWQiOiIwNzg3OTE5NjI5MyIsImlhdCI6MTY5MzM5MzQzMiwiZXhwIjoxNjkzNDA3ODMyfQ.AOlcnUr6DGn2Qvuy2vxbnxJ6X85LAnGw07fo4PCb7WcdoO67CK2Jw_xIMRfxaAajziDnMfDgR7izXcDvN-8DprBbUG7SLbXrv96IBlAp3z4Yw1jOw2BdHz9V-PZTzkeWJckuSU9hgFsB7RDeXdCRd_zThN__jN02MG8gHGhJo9_hP5ezJ_zSfO2TnIjlX-4FwfvJKppCFkH86MAGf62pxN8qQe-MOA10gJpdKtCBOSN4neAoF6v2HoIlcNK6SOvhv-_oqZnJuKeQl03VAUZaPsEjRbTgxyfgm-amA7r64C_ouo2DoPoIiW85L9cS-hlnty3x92Vj2klUQXnLUSsgXg";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("All", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KoderDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (KoderDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KoderDTO)));
        }

        /// <summary>
        /// Hent alle Kodelister. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of KoderDTO</returns>
        public async System.Threading.Tasks.Task<KoderDTO> AllAsync ()
        {
             ApiResponse<KoderDTO> localVarResponse = await AllAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Hent alle Kodelister. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (KoderDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KoderDTO>> AllAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/ekstern/kodeverdier/";  //var localVarPath = "/api/ekstern/koder/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("All", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KoderDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (KoderDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KoderDTO)));
        }

        /// <summary>
        /// Hent koder for oppgitt kodeliste. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kodelistenavn"></param>
        /// <returns>KodeDTO</returns>
        public KodeDTO HentKodeListe (string kodelistenavn)
        {
             ApiResponse<KodeDTO> localVarResponse = HentKodeListeWithHttpInfo(kodelistenavn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Hent koder for oppgitt kodeliste. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kodelistenavn"></param>
        /// <returns>ApiResponse of KodeDTO</returns>
        public ApiResponse< KodeDTO > HentKodeListeWithHttpInfo (string kodelistenavn)
        {
            // verify the required parameter 'kodelistenavn' is set
            if (kodelistenavn == null)
                throw new ApiException(400, "Missing required parameter 'kodelistenavn' when calling KodelisterApi->HentKodeListe");

            var localVarPath = "/api/ekstern/kodeverdier/{kodelistenavn}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kodelistenavn != null) localVarPathParams.Add("kodelistenavn", this.Configuration.ApiClient.ParameterToString(kodelistenavn)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HentKodeListe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KodeDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (KodeDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KodeDTO)));
        }

        /// <summary>
        /// Hent koder for oppgitt kodeliste. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kodelistenavn"></param>
        /// <returns>Task of KodeDTO</returns>
        public async System.Threading.Tasks.Task<KodeDTO> HentKodeListeAsync (string kodelistenavn)
        {
             ApiResponse<KodeDTO> localVarResponse = await HentKodeListeAsyncWithHttpInfo(kodelistenavn);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Hent koder for oppgitt kodeliste. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kodelistenavn"></param>
        /// <returns>Task of ApiResponse (KodeDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KodeDTO>> HentKodeListeAsyncWithHttpInfo (string kodelistenavn)
        {
            // verify the required parameter 'kodelistenavn' is set
            if (kodelistenavn == null)
                throw new ApiException(400, "Missing required parameter 'kodelistenavn' when calling KodelisterApi->HentKodeListe");

            var localVarPath = "/api/ekstern/kodeverdier/{kodelistenavn}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kodelistenavn != null) localVarPathParams.Add("kodelistenavn", this.Configuration.ApiClient.ParameterToString(kodelistenavn)); // path parameter
            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HentKodeListe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KodeDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (KodeDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KodeDTO)));
        }

    }
}
