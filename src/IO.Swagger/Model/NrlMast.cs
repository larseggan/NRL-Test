/* 
 * Nasjonalt Register over Luftfartshindre
 *
 * ## Autentisering Finn autoriserings token her: [https://nrl-test.kartverket.no/token/](https://nrl-test.kartverket.no/token/)   Trykk \"Authorize\" og skriv inn `Bearer <token>`  ## Kontakt oss Spørsmål kan sendes til [nrl@kartverket.no](mailto:nrl@kartverket.no) ## Annen dokumentasjon [Introduksjon til NRL](https://www.kartverket.no/geodataarbeid/nrl)   [SOSI-standardisert produktspesifikasjon - NRL rapportering](https://sosi.geonorge.no/produktspesifikasjoner/NRL-rapportering/)   [NRL - webklient](https://nrl-test.kartverket.no) 
 *
 * OpenAPI spec version: 0.6.59
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// NrlMast
    /// </summary>
    [DataContract]
        public partial class NrlMast : Fellesegenskaper,  IEquatable<NrlMast>, IValidatableObject, OneOfFellesegenskaper 
    {
        /// <summary>
        /// Defines MastType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum MastTypeEnum
        {
            /// <summary>
            /// Enum Annet for value: annet
            /// </summary>
            [EnumMember(Value = "annet")]
            Annet = 1,
            /// <summary>
            /// Enum Belysningsmast for value: belysningsmast
            /// </summary>
            [EnumMember(Value = "belysningsmast")]
            Belysningsmast = 2,
            /// <summary>
            /// Enum Ekommast for value: ekommast
            /// </summary>
            [EnumMember(Value = "ekommast")]
            Ekommast = 3,
            /// <summary>
            /// Enum Hgspentmast for value: høgspentmast
            /// </summary>
            [EnumMember(Value = "høgspentmast")]
            Hgspentmast = 4,
            /// <summary>
            /// Enum Kontaktledningsmast for value: kontaktledningsmast
            /// </summary>
            [EnumMember(Value = "kontaktledningsmast")]
            Kontaktledningsmast = 5,
            /// <summary>
            /// Enum Lavspentmast for value: lavspentmast
            /// </summary>
            [EnumMember(Value = "lavspentmast")]
            Lavspentmast = 6,
            /// <summary>
            /// Enum Mlemast for value: målemast
            /// </summary>
            [EnumMember(Value = "målemast")]
            Mlemast = 7,
            /// <summary>
            /// Enum Radiomast for value: radiomast
            /// </summary>
            [EnumMember(Value = "radiomast")]
            Radiomast = 8,
            /// <summary>
            /// Enum Taubanemast for value: taubanemast
            /// </summary>
            [EnumMember(Value = "taubanemast")]
            Taubanemast = 9,
            /// <summary>
            /// Enum Telemast for value: telemast
            /// </summary>
            [EnumMember(Value = "telemast")]
            Telemast = 10        }
        /// <summary>
        /// Gets or Sets MastType
        /// </summary>
        [DataMember(Name="mastType", EmitDefaultValue=false)]
        public MastTypeEnum? MastType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NrlMast" /> class.
        /// </summary>
        /// <param name="mastType">mastType.</param>
        /// <param name="horisontalAvstand">horisontalAvstand.</param>
        /// <param name="nrlLuftspenn">nrlLuftspenn.</param>
        public NrlMast(MastTypeEnum? mastType = default(MastTypeEnum?), double? horisontalAvstand = default(double?), List<Guid?> nrlLuftspenn = default(List<Guid?>), StatusEnum? status = default(StatusEnum?), Guid? komponentident = default(Guid?), Komponentreferanse referanse = default(Komponentreferanse), string navn = default(string), double? vertikalAvstand = default(double?), string geometristreng = default(string), LuftfartshindermerkingEnum? luftfartshindermerking = default(LuftfartshindermerkingEnum?), LuftfartshinderlyssettingEnum? luftfartshinderlyssetting = default(LuftfartshinderlyssettingEnum?), MaterialeEnum? materiale = default(MaterialeEnum?), DateTime? datafangstdato = default(DateTime?), Kvalitet kvalitet = default(Kvalitet), string informasjon = default(string), VerifisertRapporteringsnyaktighetEnum? verifisertRapporteringsnyaktighet = default(VerifisertRapporteringsnyaktighetEnum?), HydereferanseEnum? hydereferanse = default(HydereferanseEnum?), string featureType = default(string)) : base(status, komponentident, referanse, navn, vertikalAvstand, geometristreng, luftfartshindermerking, luftfartshinderlyssetting, materiale, datafangstdato, kvalitet, informasjon, verifisertRapporteringsnyaktighet, hydereferanse, featureType)
        {
            this.MastType = mastType;
            this.HorisontalAvstand = horisontalAvstand;
            this.NrlLuftspenn = nrlLuftspenn;
        }
        

        /// <summary>
        /// Gets or Sets HorisontalAvstand
        /// </summary>
        [DataMember(Name="horisontalAvstand", EmitDefaultValue=false)]
        public double? HorisontalAvstand { get; set; }

        /// <summary>
        /// Gets or Sets NrlLuftspenn
        /// </summary>
        [DataMember(Name="nrlLuftspenn", EmitDefaultValue=false)]
        public List<Guid?> NrlLuftspenn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NrlMast {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  MastType: ").Append(MastType).Append("\n");
            sb.Append("  HorisontalAvstand: ").Append(HorisontalAvstand).Append("\n");
            sb.Append("  NrlLuftspenn: ").Append(NrlLuftspenn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NrlMast);
        }

        /// <summary>
        /// Returns true if NrlMast instances are equal
        /// </summary>
        /// <param name="input">Instance of NrlMast to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NrlMast input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.MastType == input.MastType ||
                    (this.MastType != null &&
                    this.MastType.Equals(input.MastType))
                ) && base.Equals(input) && 
                (
                    this.HorisontalAvstand == input.HorisontalAvstand ||
                    (this.HorisontalAvstand != null &&
                    this.HorisontalAvstand.Equals(input.HorisontalAvstand))
                ) && base.Equals(input) && 
                (
                    this.NrlLuftspenn == input.NrlLuftspenn ||
                    this.NrlLuftspenn != null &&
                    input.NrlLuftspenn != null &&
                    this.NrlLuftspenn.SequenceEqual(input.NrlLuftspenn)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.MastType != null)
                    hashCode = hashCode * 59 + this.MastType.GetHashCode();
                if (this.HorisontalAvstand != null)
                    hashCode = hashCode * 59 + this.HorisontalAvstand.GetHashCode();
                if (this.NrlLuftspenn != null)
                    hashCode = hashCode * 59 + this.NrlLuftspenn.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
