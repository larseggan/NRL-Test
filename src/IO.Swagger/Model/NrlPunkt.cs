/* 
 * Nasjonalt Register over Luftfartshindre
 *
 * ## Autentisering Finn autoriserings token her: [https://nrl-test.kartverket.no/token/](https://nrl-test.kartverket.no/token/)   Trykk \"Authorize\" og skriv inn `Bearer <token>`  ## Kontakt oss Spørsmål kan sendes til [nrl@kartverket.no](mailto:nrl@kartverket.no) ## Annen dokumentasjon [Introduksjon til NRL](https://www.kartverket.no/geodataarbeid/nrl)   [SOSI-standardisert produktspesifikasjon - NRL rapportering](https://sosi.geonorge.no/produktspesifikasjoner/NRL-rapportering/)   [NRL - webklient](https://nrl-test.kartverket.no) 
 *
 * OpenAPI spec version: 0.6.59
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// NrlPunkt
    /// </summary>
    [DataContract]
        public partial class NrlPunkt : Fellesegenskaper,  IEquatable<NrlPunkt>, IValidatableObject, OneOfFellesegenskaper 
    {
        /// <summary>
        /// Defines PunktType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum PunktTypeEnum
        {
            /// <summary>
            /// Enum Annet for value: annet
            /// </summary>
            [EnumMember(Value = "annet")]
            Annet = 1,
            /// <summary>
            /// Enum Bygning for value: bygning
            /// </summary>
            [EnumMember(Value = "bygning")]
            Bygning = 2,
            /// <summary>
            /// Enum Flaggstang for value: flaggstang
            /// </summary>
            [EnumMember(Value = "flaggstang")]
            Flaggstang = 3,
            /// <summary>
            /// Enum ForankretBallong for value: forankretBallong
            /// </summary>
            [EnumMember(Value = "forankretBallong")]
            ForankretBallong = 4,
            /// <summary>
            /// Enum Fornyelsesparkinnretning for value: fornøyelsesparkinnretning
            /// </summary>
            [EnumMember(Value = "fornøyelsesparkinnretning")]
            Fornyelsesparkinnretning = 5,
            /// <summary>
            /// Enum Fyrtrn for value: fyrtårn
            /// </summary>
            [EnumMember(Value = "fyrtårn")]
            Fyrtrn = 6,
            /// <summary>
            /// Enum Hopptrn for value: hopptårn
            /// </summary>
            [EnumMember(Value = "hopptårn")]
            Hopptrn = 7,
            /// <summary>
            /// Enum Kjletrn for value: kjøletårn
            /// </summary>
            [EnumMember(Value = "kjøletårn")]
            Kjletrn = 8,
            /// <summary>
            /// Enum Kontrolltrn for value: kontrolltårn
            /// </summary>
            [EnumMember(Value = "kontrolltårn")]
            Kontrolltrn = 9,
            /// <summary>
            /// Enum Kraftverk for value: kraftverk
            /// </summary>
            [EnumMember(Value = "kraftverk")]
            Kraftverk = 10,
            /// <summary>
            /// Enum Kran for value: kran
            /// </summary>
            [EnumMember(Value = "kran")]
            Kran = 11,
            /// <summary>
            /// Enum Kuppel for value: kuppel
            /// </summary>
            [EnumMember(Value = "kuppel")]
            Kuppel = 12,
            /// <summary>
            /// Enum Monument for value: monument
            /// </summary>
            [EnumMember(Value = "monument")]
            Monument = 13,
            /// <summary>
            /// Enum Navigasjonshjelpemiddel for value: navigasjonshjelpemiddel
            /// </summary>
            [EnumMember(Value = "navigasjonshjelpemiddel")]
            Navigasjonshjelpemiddel = 14,
            /// <summary>
            /// Enum Petroleumsinnretning for value: petroleumsinnretning
            /// </summary>
            [EnumMember(Value = "petroleumsinnretning")]
            Petroleumsinnretning = 15,
            /// <summary>
            /// Enum Pipe for value: pipe
            /// </summary>
            [EnumMember(Value = "pipe")]
            Pipe = 16,
            /// <summary>
            /// Enum Raffineri for value: raffineri
            /// </summary>
            [EnumMember(Value = "raffineri")]
            Raffineri = 17,
            /// <summary>
            /// Enum Silo for value: silo
            /// </summary>
            [EnumMember(Value = "silo")]
            Silo = 18,
            /// <summary>
            /// Enum Sprengningstrn for value: sprengningstårn
            /// </summary>
            [EnumMember(Value = "sprengningstårn")]
            Sprengningstrn = 19,
            /// <summary>
            /// Enum Tank for value: tank
            /// </summary>
            [EnumMember(Value = "tank")]
            Tank = 20,
            /// <summary>
            /// Enum Trn for value: tårn
            /// </summary>
            [EnumMember(Value = "tårn")]
            Trn = 21,
            /// <summary>
            /// Enum Vanntrn for value: vanntårn
            /// </summary>
            [EnumMember(Value = "vanntårn")]
            Vanntrn = 22,
            /// <summary>
            /// Enum Vindturbin for value: vindturbin
            /// </summary>
            [EnumMember(Value = "vindturbin")]
            Vindturbin = 23        }
        /// <summary>
        /// Gets or Sets PunktType
        /// </summary>
        [DataMember(Name="punktType", EmitDefaultValue=false)]
        public PunktTypeEnum? PunktType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NrlPunkt" /> class.
        /// </summary>
        /// <param name="punktType">punktType.</param>
        /// <param name="horisontalAvstand">horisontalAvstand.</param>
        public NrlPunkt(PunktTypeEnum? punktType = default(PunktTypeEnum?), double? horisontalAvstand = default(double?), StatusEnum? status = default(StatusEnum?), Guid? komponentident = default(Guid?), Komponentreferanse referanse = default(Komponentreferanse), string navn = default(string), double? vertikalAvstand = default(double?), string geometristreng = default(string), LuftfartshindermerkingEnum? luftfartshindermerking = default(LuftfartshindermerkingEnum?), LuftfartshinderlyssettingEnum? luftfartshinderlyssetting = default(LuftfartshinderlyssettingEnum?), MaterialeEnum? materiale = default(MaterialeEnum?), DateTime? datafangstdato = default(DateTime?), Kvalitet kvalitet = default(Kvalitet), string informasjon = default(string), VerifisertRapporteringsnyaktighetEnum? verifisertRapporteringsnyaktighet = default(VerifisertRapporteringsnyaktighetEnum?), HydereferanseEnum? hydereferanse = default(HydereferanseEnum?), string featureType = default(string)) : base(status, komponentident, referanse, navn, vertikalAvstand, geometristreng, luftfartshindermerking, luftfartshinderlyssetting, materiale, datafangstdato, kvalitet, informasjon, verifisertRapporteringsnyaktighet, hydereferanse, featureType)
        {
            this.PunktType = punktType;
            this.HorisontalAvstand = horisontalAvstand;
        }
        

        /// <summary>
        /// Gets or Sets HorisontalAvstand
        /// </summary>
        [DataMember(Name="horisontalAvstand", EmitDefaultValue=false)]
        public double? HorisontalAvstand { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NrlPunkt {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  PunktType: ").Append(PunktType).Append("\n");
            sb.Append("  HorisontalAvstand: ").Append(HorisontalAvstand).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NrlPunkt);
        }

        /// <summary>
        /// Returns true if NrlPunkt instances are equal
        /// </summary>
        /// <param name="input">Instance of NrlPunkt to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NrlPunkt input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.PunktType == input.PunktType ||
                    (this.PunktType != null &&
                    this.PunktType.Equals(input.PunktType))
                ) && base.Equals(input) && 
                (
                    this.HorisontalAvstand == input.HorisontalAvstand ||
                    (this.HorisontalAvstand != null &&
                    this.HorisontalAvstand.Equals(input.HorisontalAvstand))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.PunktType != null)
                    hashCode = hashCode * 59 + this.PunktType.GetHashCode();
                if (this.HorisontalAvstand != null)
                    hashCode = hashCode * 59 + this.HorisontalAvstand.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
