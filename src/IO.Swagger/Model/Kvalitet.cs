/* 
 * Nasjonalt Register over Luftfartshindre
 *
 * ## Autentisering Finn autoriserings token her: [https://nrl-test.kartverket.no/token/](https://nrl-test.kartverket.no/token/)   Trykk \"Authorize\" og skriv inn `Bearer <token>`  ## Kontakt oss Spørsmål kan sendes til [nrl@kartverket.no](mailto:nrl@kartverket.no) ## Annen dokumentasjon [Introduksjon til NRL](https://www.kartverket.no/geodataarbeid/nrl)   [SOSI-standardisert produktspesifikasjon - NRL rapportering](https://sosi.geonorge.no/produktspesifikasjoner/NRL-rapportering/)   [NRL - webklient](https://nrl-test.kartverket.no) 
 *
 * OpenAPI spec version: 0.6.59
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// Kvalitet
    /// </summary>
    [DataContract]
        public partial class Kvalitet :  IEquatable<Kvalitet>, IValidatableObject
    {
        /// <summary>
        /// Defines Datafangstmetode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum DatafangstmetodeEnum
        {
            /// <summary>
            /// Enum Dig for value: dig
            /// </summary>
            [EnumMember(Value = "dig")]
            Dig = 1,
            /// <summary>
            /// Enum Fot for value: fot
            /// </summary>
            [EnumMember(Value = "fot")]
            Fot = 2,
            /// <summary>
            /// Enum Gen for value: gen
            /// </summary>
            [EnumMember(Value = "gen")]
            Gen = 3,
            /// <summary>
            /// Enum Lan for value: lan
            /// </summary>
            [EnumMember(Value = "lan")]
            Lan = 4,
            /// <summary>
            /// Enum Pla for value: pla
            /// </summary>
            [EnumMember(Value = "pla")]
            Pla = 5,
            /// <summary>
            /// Enum Sat for value: sat
            /// </summary>
            [EnumMember(Value = "sat")]
            Sat = 6,
            /// <summary>
            /// Enum Byg for value: byg
            /// </summary>
            [EnumMember(Value = "byg")]
            Byg = 7,
            /// <summary>
            /// Enum Ukj for value: ukj
            /// </summary>
            [EnumMember(Value = "ukj")]
            Ukj = 8        }
        /// <summary>
        /// Gets or Sets Datafangstmetode
        /// </summary>
        [DataMember(Name="datafangstmetode", EmitDefaultValue=false)]
        public DatafangstmetodeEnum? Datafangstmetode { get; set; }
        /// <summary>
        /// Defines DatafangstmetodeHyde
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum DatafangstmetodeHydeEnum
        {
            /// <summary>
            /// Enum Dig for value: dig
            /// </summary>
            [EnumMember(Value = "dig")]
            Dig = 1,
            /// <summary>
            /// Enum Fot for value: fot
            /// </summary>
            [EnumMember(Value = "fot")]
            Fot = 2,
            /// <summary>
            /// Enum Gen for value: gen
            /// </summary>
            [EnumMember(Value = "gen")]
            Gen = 3,
            /// <summary>
            /// Enum Lan for value: lan
            /// </summary>
            [EnumMember(Value = "lan")]
            Lan = 4,
            /// <summary>
            /// Enum Pla for value: pla
            /// </summary>
            [EnumMember(Value = "pla")]
            Pla = 5,
            /// <summary>
            /// Enum Sat for value: sat
            /// </summary>
            [EnumMember(Value = "sat")]
            Sat = 6,
            /// <summary>
            /// Enum Byg for value: byg
            /// </summary>
            [EnumMember(Value = "byg")]
            Byg = 7,
            /// <summary>
            /// Enum Ukj for value: ukj
            /// </summary>
            [EnumMember(Value = "ukj")]
            Ukj = 8        }
        /// <summary>
        /// Gets or Sets DatafangstmetodeHyde
        /// </summary>
        [DataMember(Name="datafangstmetodeHøyde", EmitDefaultValue=false)]
        public DatafangstmetodeHydeEnum? DatafangstmetodeHyde { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Kvalitet" /> class.
        /// </summary>
        /// <param name="datafangstmetode">datafangstmetode.</param>
        /// <param name="nyaktighet">nyaktighet.</param>
        /// <param name="datafangstmetodeHyde">datafangstmetodeHyde.</param>
        /// <param name="nyaktighetHyde">nyaktighetHyde.</param>
        public Kvalitet(DatafangstmetodeEnum? datafangstmetode = default(DatafangstmetodeEnum?), int? nyaktighet = default(int?), DatafangstmetodeHydeEnum? datafangstmetodeHyde = default(DatafangstmetodeHydeEnum?), int? nyaktighetHyde = default(int?))
        {
            this.Datafangstmetode = datafangstmetode;
            this.Nyaktighet = nyaktighet;
            this.DatafangstmetodeHyde = datafangstmetodeHyde;
            this.NyaktighetHyde = nyaktighetHyde;
        }
        

        /// <summary>
        /// Gets or Sets Nyaktighet
        /// </summary>
        [DataMember(Name="nøyaktighet", EmitDefaultValue=false)]
        public int? Nyaktighet { get; set; }


        /// <summary>
        /// Gets or Sets NyaktighetHyde
        /// </summary>
        [DataMember(Name="nøyaktighetHøyde", EmitDefaultValue=false)]
        public int? NyaktighetHyde { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Kvalitet {\n");
            sb.Append("  Datafangstmetode: ").Append(Datafangstmetode).Append("\n");
            sb.Append("  Nyaktighet: ").Append(Nyaktighet).Append("\n");
            sb.Append("  DatafangstmetodeHyde: ").Append(DatafangstmetodeHyde).Append("\n");
            sb.Append("  NyaktighetHyde: ").Append(NyaktighetHyde).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Kvalitet);
        }

        /// <summary>
        /// Returns true if Kvalitet instances are equal
        /// </summary>
        /// <param name="input">Instance of Kvalitet to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Kvalitet input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Datafangstmetode == input.Datafangstmetode ||
                    (this.Datafangstmetode != null &&
                    this.Datafangstmetode.Equals(input.Datafangstmetode))
                ) && 
                (
                    this.Nyaktighet == input.Nyaktighet ||
                    (this.Nyaktighet != null &&
                    this.Nyaktighet.Equals(input.Nyaktighet))
                ) && 
                (
                    this.DatafangstmetodeHyde == input.DatafangstmetodeHyde ||
                    (this.DatafangstmetodeHyde != null &&
                    this.DatafangstmetodeHyde.Equals(input.DatafangstmetodeHyde))
                ) && 
                (
                    this.NyaktighetHyde == input.NyaktighetHyde ||
                    (this.NyaktighetHyde != null &&
                    this.NyaktighetHyde.Equals(input.NyaktighetHyde))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Datafangstmetode != null)
                    hashCode = hashCode * 59 + this.Datafangstmetode.GetHashCode();
                if (this.Nyaktighet != null)
                    hashCode = hashCode * 59 + this.Nyaktighet.GetHashCode();
                if (this.DatafangstmetodeHyde != null)
                    hashCode = hashCode * 59 + this.DatafangstmetodeHyde.GetHashCode();
                if (this.NyaktighetHyde != null)
                    hashCode = hashCode * 59 + this.NyaktighetHyde.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
