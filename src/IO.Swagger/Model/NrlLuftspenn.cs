/* 
 * Nasjonalt Register over Luftfartshindre
 *
 * ## Autentisering Finn autoriserings token her: [https://nrl-test.kartverket.no/token/](https://nrl-test.kartverket.no/token/)   Trykk \"Authorize\" og skriv inn `Bearer <token>`  ## Kontakt oss Spørsmål kan sendes til [nrl@kartverket.no](mailto:nrl@kartverket.no) ## Annen dokumentasjon [Introduksjon til NRL](https://www.kartverket.no/geodataarbeid/nrl)   [SOSI-standardisert produktspesifikasjon - NRL rapportering](https://sosi.geonorge.no/produktspesifikasjoner/NRL-rapportering/)   [NRL - webklient](https://nrl-test.kartverket.no) 
 *
 * OpenAPI spec version: 0.6.59
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// NrlLuftspenn
    /// </summary>
    [DataContract]
        public partial class NrlLuftspenn : Fellesegenskaper,  IEquatable<NrlLuftspenn>, IValidatableObject, OneOfFellesegenskaper 
    {
        /// <summary>
        /// Defines LuftspennType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum LuftspennTypeEnum
        {
            /// <summary>
            /// Enum Annet for value: annet
            /// </summary>
            [EnumMember(Value = "annet")]
            Annet = 1,
            /// <summary>
            /// Enum Bardun for value: bardun
            /// </summary>
            [EnumMember(Value = "bardun")]
            Bardun = 2,
            /// <summary>
            /// Enum Gondolbane for value: gondolbane
            /// </summary>
            [EnumMember(Value = "gondolbane")]
            Gondolbane = 3,
            /// <summary>
            /// Enum Ekom for value: ekom
            /// </summary>
            [EnumMember(Value = "ekom")]
            Ekom = 4,
            /// <summary>
            /// Enum Hgspent for value: høgspent
            /// </summary>
            [EnumMember(Value = "høgspent")]
            Hgspent = 5,
            /// <summary>
            /// Enum Kontaktledning for value: kontaktledning
            /// </summary>
            [EnumMember(Value = "kontaktledning")]
            Kontaktledning = 6,
            /// <summary>
            /// Enum Lavspent for value: lavspent
            /// </summary>
            [EnumMember(Value = "lavspent")]
            Lavspent = 7,
            /// <summary>
            /// Enum Lypestreng for value: løypestreng
            /// </summary>
            [EnumMember(Value = "løypestreng")]
            Lypestreng = 8,
            /// <summary>
            /// Enum Skitrekk for value: skitrekk
            /// </summary>
            [EnumMember(Value = "skitrekk")]
            Skitrekk = 9,
            /// <summary>
            /// Enum Stolheis for value: stolheis
            /// </summary>
            [EnumMember(Value = "stolheis")]
            Stolheis = 10,
            /// <summary>
            /// Enum Taubane for value: taubane
            /// </summary>
            [EnumMember(Value = "taubane")]
            Taubane = 11,
            /// <summary>
            /// Enum Vaier for value: vaier
            /// </summary>
            [EnumMember(Value = "vaier")]
            Vaier = 12,
            /// <summary>
            /// Enum Zipline for value: zipline
            /// </summary>
            [EnumMember(Value = "zipline")]
            Zipline = 13        }
        /// <summary>
        /// Gets or Sets LuftspennType
        /// </summary>
        [DataMember(Name="luftspennType", EmitDefaultValue=false)]
        public LuftspennTypeEnum? LuftspennType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NrlLuftspenn" /> class.
        /// </summary>
        /// <param name="luftspennType">luftspennType.</param>
        /// <param name="anleggsbredde">anleggsbredde.</param>
        /// <param name="friseilingshyde">friseilingshyde.</param>
        /// <param name="nrlMast">nrlMast.</param>
        public NrlLuftspenn(LuftspennTypeEnum? luftspennType = default(LuftspennTypeEnum?), double? anleggsbredde = default(double?), double? friseilingshyde = default(double?), List<Guid?> nrlMast = default(List<Guid?>), StatusEnum? status = default(StatusEnum?), Guid? komponentident = default(Guid?), Komponentreferanse referanse = default(Komponentreferanse), string navn = default(string), double? vertikalAvstand = default(double?), string geometristreng = default(string), LuftfartshindermerkingEnum? luftfartshindermerking = default(LuftfartshindermerkingEnum?), LuftfartshinderlyssettingEnum? luftfartshinderlyssetting = default(LuftfartshinderlyssettingEnum?), MaterialeEnum? materiale = default(MaterialeEnum?), DateTime? datafangstdato = default(DateTime?), Kvalitet kvalitet = default(Kvalitet), string informasjon = default(string), VerifisertRapporteringsnyaktighetEnum? verifisertRapporteringsnyaktighet = default(VerifisertRapporteringsnyaktighetEnum?), HydereferanseEnum? hydereferanse = default(HydereferanseEnum?), string featureType = default(string)) : base(status, komponentident, referanse, navn, vertikalAvstand, geometristreng, luftfartshindermerking, luftfartshinderlyssetting, materiale, datafangstdato, kvalitet, informasjon, verifisertRapporteringsnyaktighet, hydereferanse, featureType)
        {
            this.LuftspennType = luftspennType;
            this.Anleggsbredde = anleggsbredde;
            this.Friseilingshyde = friseilingshyde;
            this.NrlMast = nrlMast;
        }
        

        /// <summary>
        /// Gets or Sets Anleggsbredde
        /// </summary>
        [DataMember(Name="anleggsbredde", EmitDefaultValue=false)]
        public double? Anleggsbredde { get; set; }

        /// <summary>
        /// Gets or Sets Friseilingshyde
        /// </summary>
        [DataMember(Name="friseilingshøyde", EmitDefaultValue=false)]
        public double? Friseilingshyde { get; set; }

        /// <summary>
        /// Gets or Sets NrlMast
        /// </summary>
        [DataMember(Name="nrlMast", EmitDefaultValue=false)]
        public List<Guid?> NrlMast { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NrlLuftspenn {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  LuftspennType: ").Append(LuftspennType).Append("\n");
            sb.Append("  Anleggsbredde: ").Append(Anleggsbredde).Append("\n");
            sb.Append("  Friseilingshyde: ").Append(Friseilingshyde).Append("\n");
            sb.Append("  NrlMast: ").Append(NrlMast).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NrlLuftspenn);
        }

        /// <summary>
        /// Returns true if NrlLuftspenn instances are equal
        /// </summary>
        /// <param name="input">Instance of NrlLuftspenn to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NrlLuftspenn input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.LuftspennType == input.LuftspennType ||
                    (this.LuftspennType != null &&
                    this.LuftspennType.Equals(input.LuftspennType))
                ) && base.Equals(input) && 
                (
                    this.Anleggsbredde == input.Anleggsbredde ||
                    (this.Anleggsbredde != null &&
                    this.Anleggsbredde.Equals(input.Anleggsbredde))
                ) && base.Equals(input) && 
                (
                    this.Friseilingshyde == input.Friseilingshyde ||
                    (this.Friseilingshyde != null &&
                    this.Friseilingshyde.Equals(input.Friseilingshyde))
                ) && base.Equals(input) && 
                (
                    this.NrlMast == input.NrlMast ||
                    this.NrlMast != null &&
                    input.NrlMast != null &&
                    this.NrlMast.SequenceEqual(input.NrlMast)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.LuftspennType != null)
                    hashCode = hashCode * 59 + this.LuftspennType.GetHashCode();
                if (this.Anleggsbredde != null)
                    hashCode = hashCode * 59 + this.Anleggsbredde.GetHashCode();
                if (this.Friseilingshyde != null)
                    hashCode = hashCode * 59 + this.Friseilingshyde.GetHashCode();
                if (this.NrlMast != null)
                    hashCode = hashCode * 59 + this.NrlMast.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
